#### Cloudant query
# JSON document type

# fetch all documents
{
  "selector": {}
}



# query  
{
   "selector": {
      "_id": {
         "$gt": "2"
      }
   },
   "fields": [
      "_id",
      "price",
      "square_feet"
   ],
   "sort": [
      {
         "_id": "desc"
      }
   ]
}




#### cURL (Client URL: command line tool)
# Cloudant DBs have an HTTP API


# To retrieve a web page
curl url_webpage


# To create a variable for Cloudant's URL
export URL=url_webpage


# To create an alias
alias acurl="curl -sgH 'Content-type: application/json'"

- s: makes your request slient (you won't see any progress or error message)
- g: disables the URL globbing parser
- H: allows you to specify the content-type header


# To test connectivity
acurl $URL/


# To view a list of all DBs
acurl $URL/_all_dbs | python -m json.tool
acurl $URL/_all_dbs | jq
acurl $URL/_all_dbs


# To view the details for a single DB
acurl $URL/db_name | python -m json.tool
acurl $URL/db_name | jq


# To view  the documents in a DB
acurl $URL/db_name/_all_docs?include_docs=True

- include_docs=True: to retrieve the bodies of the documnets too


# To retreive a single document
acurl $URL/db_name/document_id





#### CRUD Operation: using HTTP API

# Create a DB
curl -X PUT $URL/db_name


# Drop a DB
curl -X DELETE $URL/db_name

- expected response: {"ok":ture}


# Insert a document
curl -X PUT $URL/db_name/"document_id" -d '{"coursename":"Excel Basics","level":"beginner"}'

- d: allows you to enter the JSON data for the body of the document
- expected response: {"ok":ture, "id":"document_id", "rev":"1-123456"}
- ; rev = revision token number = token value generated by the db when the document was written to it


# Update a document
curl -X PUT $URL/db_name/"document_id" -d '{"coursename":"Excel Basics","level":"advance","_rev":"1-123456"}'

- must provide the revision token value for the document
- expected response: {"ok":ture, "id":"document_id", "rev":"1-123456"}
- error esponse: {"error":"conflict", "reason":"Document update conflict."}


# Delete a document
curl -X DELETE $URL/db_name/"document_id"?rev=1-123456

- expected response: {"ok":ture}
- error esponse: {"error":"not found", "reason":"deleted"}





#### Quering

curl -X POST $URL/db_name/_find  \
     -H "Content-Type: application/json"  \
     -d '{"selector":{"_id":"docuement_id"}}'
     

- JSON query is sent using a HTTP POST request to the db's endpoint "_find" using curl
- use logical operators ex) $gt, $lt


curl -X POST $URL/db_name/_find  \
     -d@file_name.json 
     
- reuse or for large JSON queries, use a .json file






#### Get the environment ready

export CLOUDANTURL=“your_url”
curl $CLOUDANTURL                     # test if you can reach your cloudant server
curl $CLOUDANTURL/_all_dbs            # test your credentials


curl -X PUT $CLOUDANTURL/animals      # create a db
curl -X DELETE $CLOUDANTURL/animals   # delete a db
curl $CLOUDANTURL/_all_dbs            # list all dbs



# insert a document

curl -X PUT $CLOUDANTURL/planets/"1"                         
     -d '{ "name" : "Mercury" , "position_from_sum" :1 }'
      
curl -X GET $CLOUDANTURL/planets/1    # list the document with _id=1



# update a document

curl -X PUT $CLOUDANTURL/planets/1 -d '{ 
    "name" : "Mercury" ,
    "position_from_sum" :1,
    "revolution_time":"88 days",
    "_rev":"1-123456"
    }'




# delete a document
curl -X DELETE $CLOUDANTURL/planets/1?rev=1-123456



# query your db

curl -X POST $CLOUDANTURL/diamonds/_find \
      -H"Content-Type: application/json" \
      -d'{ 
          "selector":
              {
                  "_id":"1"
              }
          }'
          
          


# create an index

curl -X POST $CLOUDANTURL/diamonds/_index \
      -H"Content-Type: application/json" \
      -d'{
          "index": {
              "fields": ["price"]
          }
      }'
